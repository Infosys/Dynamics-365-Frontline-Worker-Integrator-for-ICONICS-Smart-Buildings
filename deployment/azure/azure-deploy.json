{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "groupId": {
            "type": "string",
            "metadata": {
                "description": "The group name to use for creating resource names"
            }
        },
        "environment": {
            "type": "string",
            "defaultValue": "d",
            "metadata": {
                "description": "The alphabetical character that identifies the deployment environment to use in the name for each created resource. For example, values include 'd' for development, 't' for test, 's' for staging, and 'p' for production."
            }
        },
        "sku": {
            "type": "string",
            "defaultValue": "standard",
            "allowedValues": [
                "standard",
                "premium"
            ],
            "metadata": {
                "description": "The SKU level to create resources under"
            }
        },
        "appInsightsRegion": {
            "type": "string",
            "defaultValue": "[resourceGroup().location]",
            "metadata": {
                "description": "The region to deploy the Application Insights resource"
            }
        },
        "topics": {
            "type": "array",
            "defaultValue": [
                "fault-ingress"
            ],
            "metadata": {
                "description": "The array of service bus topics to create"
            }
        },
        "queues": {
            "type": "array",
            "defaultValue": [
                "work-order-create",
                "create-alert-error"
            ],
            "metadata": {
                "description": "The array of service bus queues to create"
            }
        },
        "serviceBusSubscriptionName": {
            "type": "string",
            "defaultValue": "connector",
            "metadata": {
                "description": "The name of the subscription to create for each service bus topic"
            }            
        },
        "serviceBusSendKeyName": {
            "type": "string",
            "defaultValue": "connector-send-key",
            "metadata": {
                "description": "The name of the access key to be created for sending service bus messages"
            }            
        },
        "serviceBusListenKeyName": {
            "type": "string",
            "defaultValue": "connector-listen-key",
            "metadata": {
                "description": "The name of the access key to be created for listening to service bus messages"
            }            
        },
        "serviceBusSendListenKeyName": {
            "type": "string",
            "defaultValue": "connector-send-listen-key",
            "metadata": {
                "description": "The name of the access key to be created for sending and listening to service bus messages"
            }            
        },
        "FailureThreshold":
        {
            "type":"string",
            "defaultValue": "20",
            "metadata":{
                "description":"The number of exceptions to add to the configuration to break the circuit."
            }
        },
        "WindowSize":{
            "type": "string",
            "defaultValue": "00:01:00",
            "metadata": {
                "description":"The time interval to add to the configuration to break the circuit."
            }
        },
        "operationalWorkspaceName":{
            "type": "string",
            "metadata": {
                "description":"The ID of the Workspace."
            }
        }
    },
    "variables": {
        "location": "[resourceGroup().location]",
        "baseName": "[toLower(concat(parameters('groupId'), parameters('environment'), variables('location')))]",
        "appInsightsName": "[concat(variables('baseName'), 'ai')]",
        "keyVaultName": "[concat(variables('baseName'), 'kvt')]",
        "serviceBusName": "[concat(variables('baseName'), 'sb')]",
        "appServicePlanName": "[concat(variables('baseName'), 'asp')]",
        "functionAppName": "[concat(variables('baseName'), 'fa')]",
        "storageAccountName": "[concat(variables('baseName'), 'sa2')]",
        "circuitBreakerAppServicePlanName": "[concat(variables('appServicePlanName'), '-circuit-breaker')]",
        "circuitBreakerFunctionAppName": "[concat(variables('functionAppName'), '-circuit-breaker')]",
        "circuitBreakerStorageAccountName": "[concat(variables('storageAccountName'), 'cb')]",
        "circuitBreakerStorageSecretName": "StorageAccountConnectionString-CircuitBreaker"
    },
    "resources": [
        {
            "type": "Microsoft.Insights/components",
            "apiVersion": "2015-05-01",
            "name": "[variables('appInsightsName')]",
            "location": "[parameters('appInsightsRegion')]",
            "kind": "web",
            "properties": {
                "Application_Type": "web"
            }
        },
        {
            "name": "[variables('serviceBusName')]",
            "type": "Microsoft.ServiceBus/namespaces",
            "apiVersion": "2017-04-01",
            "location": "[variables('location')]",
            "sku": {
                "name": "[parameters('sku')]",
                "tier": "[parameters('sku')]"
            },
            "properties": {
            },
            "resources": [
                {
                    "type": "Providers/DiagnosticSettings",
                    "name": "[concat('Microsoft.Insights/', variables('serviceBusName'), '.Diagnostics')]",
                    "dependsOn": [
                        "[resourceId('Microsoft.ServiceBus/namespaces', variables('serviceBusName'))]"
                    ],
                    "apiVersion": "2017-05-01-preview",
                    "properties": {
                        "name": "[concat(variables('serviceBusName'), '.Diagnostics')]",
                        "workspaceId": "[parameters('operationalWorkspaceName')]",
                        "mode": "Incremental",
                        "logs": [
                            {
                                "category": "OperationalLogs",
                                "enabled": true
                            }
                        ],
                        "metrics": [
                            {
                                "category": "AllMetrics",
                                "enabled": true
                            }
                        ]
                    }
                }
            ]
        },
        {
            "type": "Microsoft.ServiceBus/namespaces/AuthorizationRules",
            "apiVersion": "2017-04-01",
            "name": "[concat(variables('serviceBusName'), '/', parameters('serviceBusSendKeyName'))]",
            "location": "[variables('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.ServiceBus/namespaces', variables('serviceBusName'))]"
            ],
            "properties": {
                "rights": [
                    "Send"
                ]
            }
        },
        {
            "type": "Microsoft.ServiceBus/namespaces/AuthorizationRules",
            "apiVersion": "2017-04-01",
            "name": "[concat(variables('serviceBusName'), '/', parameters('serviceBusListenKeyName'))]",
            "location": "[variables('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.ServiceBus/namespaces', variables('serviceBusName'))]"
            ],
            "properties": {
                "rights": [
                    "Listen"
                ]
            }
        },
        {
            "type": "Microsoft.ServiceBus/namespaces/AuthorizationRules",
            "apiVersion": "2017-04-01",
            "name": "[concat(variables('serviceBusName'), '/', parameters('serviceBusSendListenKeyName'))]",
            "location": "[variables('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.ServiceBus/namespaces', variables('serviceBusName'))]"
            ],
            "properties": {
                "rights": [
                    "Listen",
                    "Send"
                ]
            }
        },
        {
            "name": "[concat(variables('serviceBusName'), '/',parameters('queues')[copyindex()])]",
            "type": "Microsoft.ServiceBus/namespaces/queues",
            "apiVersion": "2017-04-01",
            "tags": {
                "groupdId": "[parameters('groupId')]"
            },
            "dependsOn": [
                "[resourceId('Microsoft.ServiceBus/namespaces', variables('serviceBusName'))]"
            ],
            "copy": {
                "name": "queueCopy",
                "count": "[length(parameters('queues'))]"
            },
            "properties": {
                "requiresDuplicateDetection": true,
                "requiresSession": false,
                "enableBatchedOperations": true
            },
            "resources": []
        },
        {
            "name": "[concat(variables('serviceBusName'), '/', parameters('topics')[copyIndex()])]",
            "type": "Microsoft.ServiceBus/namespaces/topics",
            "apiVersion": "2017-04-01",
            "copy": {
                "name": "topicCopy",
                "count": "[length(parameters('topics'))]"
            },
            "dependsOn": [
                "[resourceId('Microsoft.ServiceBus/namespaces', variables('serviceBusName'))]"
            ],
            "properties": {
                "defaultMessageTimeToLive": "P14D",
                "requiresDuplicateDetection": false,
                "duplicateDetectionHistoryTimeWindow": "PT10M",
                "enableBatchedOperations": true,
                "supportOrdering": true,
                "autoDeleteOnIdle": "P10675199DT2H48M5.4775807S",
                "enablePartitioning": false,
                "enableExpress": false
            },
            "resources": [
                {
                    "name": "[concat(variables('serviceBusName'), '/', parameters('topics')[copyIndex()], '/', parameters('serviceBusSubscriptionName'))]",
                    "type": "Microsoft.ServiceBus/namespaces/topics/subscriptions",
                    "apiVersion": "2017-04-01",
                    "dependsOn": [
                        "[parameters('topics')[copyIndex()]]"
                    ],
                    "properties": {
                        "lockDuration": "PT30S",
                        "requiresSession": false,
                        "defaultMessageTimeToLive": "P14D",
                        "deadLetteringOnMessageExpiration": true,
                        "deadLetteringOnFilterEvaluationExceptions": true,
                        "maxDeliveryCount": 10,
                        "status": "Active",
                        "enableBatchedOperations": false,
                        "autoDeleteOnIdle": "P10675199DT2H48M5.4775807S"
                    },
                    "resources": [
                    ]
                }
            ]
        },
        {
            "type": "Microsoft.KeyVault/vaults",
            "name": "[variables('keyVaultName')]",
            "apiVersion": "2019-09-01",
            "location": "[variables('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Web/sites', variables('functionAppName'))]",
                "[resourceId('Microsoft.Web/sites', variables('circuitBreakerFunctionAppName'))]"
            ],
            "properties": {
                "tenantId": "[subscription().tenantId]",
                "accessPolicies": [
                    {
                        "tenantId": "[reference(resourceId('Microsoft.Web/sites', variables('functionAppName')), '2018-02-01', 'Full').identity.tenantId]",
                        "objectId": "[reference(resourceId('Microsoft.Web/sites', variables('functionAppName')), '2018-02-01', 'Full').identity.principalId]",
                        "permissions": {
                                "secrets": [ "get" ]
                            }
                    },
                    {
                        "tenantId": "[reference(resourceId('Microsoft.Web/sites', variables('circuitBreakerFunctionAppName')), '2018-02-01', 'Full').identity.tenantId]",
                        "objectId": "[reference(resourceId('Microsoft.Web/sites', variables('circuitBreakerFunctionAppName')), '2018-02-01', 'Full').identity.principalId]",
                        "permissions": {
                                "secrets": [ "get" ]
                            }
                    }
                ],
                "enabledForTemplateDeployment": true,
                "enableSoftDelete": true,
                "softDeleteRetentionInDays": 14,
                "sku": {
                    "name": "[parameters('sku')]",
                    "family": "A"
                }
            },
            "resources": [
                {
                    "type": "Providers/DiagnosticSettings",
                    "name": "[concat('Microsoft.Insights/', variables('keyVaultName'), '.Diagnostics')]",
                    "dependsOn": [
                        "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]"
                    ],
                    "apiVersion": "2017-05-01-preview",
                    "properties": {
                        "name": "[concat(variables('keyVaultName'), '.Diagnostics')]",
                        "workspaceId": "[parameters('operationalWorkspaceName')]",
                        "mode": "Incremental",
                        "logs": [
                            {
                                "category": "AuditEvent",
                                "enabled": true
                            }
                        ],
                        "metrics": [
                            {
                                "category": "AllMetrics",
                                "enabled": true
                            }
                        ]
                    }
                }
            ]
        },
        {
            "type": "Microsoft.KeyVault/vaults/secrets",
            "name": "[concat(variables('keyVaultName'), '/ServiceBusConnectionSend')]",
            "apiVersion": "2019-09-01",
            "location": "[variables('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]",
                "[resourceId('Microsoft.ServiceBus/namespaces', variables('serviceBusName'))]",
                "[resourceId('Microsoft.ServiceBus/namespaces/authorizationRules', variables('serviceBusName'), parameters('serviceBusSendKeyName'))]"
            ],
            "properties": {
                "value": "[listKeys(resourceId('Microsoft.ServiceBus/namespaces/authorizationRules', variables('serviceBusName'), parameters('serviceBusSendKeyName')), '2015-08-01').primaryConnectionString]"
            }
        },
        {
            "type": "Microsoft.KeyVault/vaults/secrets",
            "name": "[concat(variables('keyVaultName'), '/ServiceBusConnectionListen')]",
            "apiVersion": "2019-09-01",
            "location": "[variables('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]",
                "[resourceId('Microsoft.ServiceBus/namespaces', variables('serviceBusName'))]",
                "[resourceId('Microsoft.ServiceBus/namespaces/authorizationRules', variables('serviceBusName'), parameters('serviceBusListenKeyName'))]"
            ],
            "properties": {
                "value": "[listKeys(resourceId('Microsoft.ServiceBus/namespaces/authorizationRules', variables('serviceBusName'), parameters('serviceBusListenKeyName')), '2015-08-01').primaryConnectionString]"
            }
        },
        {
            "type": "Microsoft.KeyVault/vaults/secrets",
            "name": "[concat(variables('keyVaultName'), '/ServiceBusConnectionSendListen')]",
            "apiVersion": "2019-09-01",
            "location": "[variables('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]",
                "[resourceId('Microsoft.ServiceBus/namespaces', variables('serviceBusName'))]",
                "[resourceId('Microsoft.ServiceBus/namespaces/authorizationRules', variables('serviceBusName'), parameters('serviceBusSendListenKeyName'))]"
            ],
            "properties": {
                "value": "[listKeys(resourceId('Microsoft.ServiceBus/namespaces/authorizationRules', variables('serviceBusName'), parameters('serviceBusSendListenKeyName')), '2015-08-01').primaryConnectionString]"
            }
        },
        {
            "type": "Microsoft.KeyVault/vaults/secrets",
            "name": "[concat(variables('keyVaultName'), '/ServiceBusKeySend')]",
            "apiVersion": "2019-09-01",
            "location": "[variables('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]",
                "[resourceId('Microsoft.ServiceBus/namespaces', variables('serviceBusName'))]",
                "[resourceId('Microsoft.ServiceBus/namespaces/authorizationRules', variables('serviceBusName'), parameters('serviceBusSendKeyName'))]"
            ],
            "properties": {
                "value": "[listKeys(resourceId('Microsoft.ServiceBus/namespaces/authorizationRules', variables('serviceBusName'), parameters('serviceBusSendKeyName')), '2015-08-01').primaryKey]"
            }
        },
        {
            "type": "Microsoft.KeyVault/vaults/secrets",
            "name": "[concat(variables('keyVaultName'), '/InstrumentationKey')]",
            "apiVersion": "2019-09-01",
            "location": "[variables('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]",
                "[resourceId('Microsoft.Insights/components/', variables('appInsightsName'))]"
            ],
            "properties": {
                "value": "[reference(resourceId('Microsoft.Insights/components/', variables('appInsightsName')), '2015-05-01').InstrumentationKey]"
            }
        },
        {
            "type": "Microsoft.Web/serverfarms",
            "apiVersion": "2020-06-01",
            "name": "[variables('appServicePlanName')]",
            "location": "[variables('location')]",
            "sku": {
                "name": "Y1",
                "tier": "Dynamic",
                "size": "Y1",
                "family": "Y",
                "capacity": 0
            },
            "properties": {
                "perSiteScaling": false,
                "maximumElasticWorkerCount": 1,
                "isSpot": false,
                "reserved": false,
                "isXenon": false,
                "hyperV": false,
                "targetWorkerCount": 0,
                "targetWorkerSizeId": 0
            },
            "kind": "functionapp"
        },
        {
            "name": "[variables('storageAccountName')]",
            "type": "Microsoft.Storage/storageAccounts",
            "apiVersion": "2019-04-01",
            "sku": {
                "name": "Standard_LRS"
            },
            "kind": "StorageV2",
            "location": "[variables('location')]",
            "properties": {
                "accessTier": "Hot"
            },
            "resources": []
        },
        {
            "type": "Microsoft.KeyVault/vaults/secrets",
            "name": "[concat(variables('keyVaultName'), '/StorageConnectionString')]",
            "apiVersion": "2019-09-01",
            "location": "[variables('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]",
                "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
            ],
            "properties": {
                "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('storageAccountName'), ';AccountKey=', listKeys(concat(resourceGroup().id, '/providers/', 'Microsoft.Storage/storageAccounts/', variables('storageAccountName')),'2015-05-01-preview').key1)]"
            }
        },
        {
            "type": "Microsoft.Web/sites",
            "apiVersion": "2020-06-01",
            "name": "[variables('functionAppName')]",
            "location": "[variables('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Web/serverfarms', variables('appServicePlanName'))]",
                "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
            ],
            "kind": "functionapp",
            "identity": {
                "type": "SystemAssigned"
            },
            "properties": {
                "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('appServicePlanName'))]",
                "httpsOnly": true
            },
            "resources": [
                {
                    "type": "Providers/DiagnosticSettings",
                    "name": "[concat('Microsoft.Insights/', variables('functionAppName'), '.Diagnostics')]",
                    "dependsOn": [
                        "[resourceId('Microsoft.Web/sites', variables('functionAppName'))]"
                    ],
                    "apiVersion": "2017-05-01-preview",
                    "properties": {
                        "name": "[concat(variables('functionAppName'), '.Diagnostics')]",
                        "workspaceId": "[parameters('operationalWorkspaceName')]",
                        "mode": "Incremental",
                        "logs": [
                            {
                                "category": "FunctionAppLogs",
                                "enabled": true
                            }
                        ],
                        "metrics": [
                            {
                                "category": "AllMetrics",
                                "enabled": true
                            }
                        ]
                    }
                }
            ]
        },
        {
            "type": "Microsoft.Web/serverfarms",
            "apiVersion": "2020-06-01",
            "name": "[variables('circuitBreakerAppServicePlanName')]",
            "location": "[variables('location')]",
            "sku": {
                "name": "Y1",
                "tier": "Dynamic",
                "size": "Y1",
                "family": "Y",
                "capacity": 0
            },
            "properties": {
                "perSiteScaling": false,
                "maximumElasticWorkerCount": 1,
                "isSpot": false,
                "reserved": false,
                "isXenon": false,
                "hyperV": false,
                "targetWorkerCount": 0,
                "targetWorkerSizeId": 0
            },
            "kind": "functionapp"
        },
        {
            "name": "[variables('circuitBreakerStorageAccountName')]",
            "type": "Microsoft.Storage/storageAccounts",
            "apiVersion": "2019-04-01",
            "sku": {
                "name": "Standard_LRS"
            },
            "kind": "StorageV2",
            "location": "[variables('location')]",
            "properties": {
                "accessTier": "Hot"
            },
            "resources": []
        },
        {
            "type": "Microsoft.KeyVault/vaults/secrets",
            "name": "[concat(variables('keyVaultName'), '/', variables('circuitBreakerStorageSecretName'))]",
            "apiVersion": "2019-09-01",
            "location": "[variables('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]",
                "[resourceId('Microsoft.Storage/storageAccounts', variables('circuitBreakerStorageAccountName'))]"
            ],
            "properties": {
                "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('circuitBreakerStorageAccountName'), ';AccountKey=', listKeys(concat(resourceGroup().id, '/providers/', 'Microsoft.Storage/storageAccounts/', variables('circuitBreakerStorageAccountName')),'2015-05-01-preview').key1)]"
            }
        },
        {
            "type": "Microsoft.Web/sites",
            "apiVersion": "2020-06-01",
            "name": "[variables('circuitBreakerFunctionAppName')]",
            "location": "[variables('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Web/serverfarms', variables('circuitBreakerAppServicePlanName'))]"
            ],
            "kind": "functionapp",
            "identity": {
                "type": "SystemAssigned"
            },
            "properties": {
                "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('circuitBreakerAppServicePlanName'))]",
                "httpsOnly": true
            },
            "resources": [
                {
                    "type": "Providers/DiagnosticSettings",
                    "name": "[concat('Microsoft.Insights/', variables('circuitBreakerFunctionAppName'), '.Diagnostics')]",
                    "dependsOn": [
                        "[resourceId('Microsoft.Web/sites', variables('circuitBreakerFunctionAppName'))]"
                    ],
                    "apiVersion": "2017-05-01-preview",
                    "properties": {
                        "name": "[concat(variables('circuitBreakerFunctionAppName'), '.Diagnostics')]",
                        "workspaceId": "[parameters('operationalWorkspaceName')]",
                        "mode": "Incremental",
                        "logs": [
                            {
                                "category": "FunctionAppLogs",
                                "enabled": true
                            }
                        ],
                        "metrics": [
                            {
                                "category": "AllMetrics",
                                "enabled": true
                            }
                        ]
                    }
                }
            ]
        },
        {
            "type": "Microsoft.Web/sites/config",
            "apiVersion": "2020-06-01",
            "name": "[concat(variables('circuitBreakerFunctionAppName'), '/appsettings')]",
            "dependsOn": [
                "[resourceId('Microsoft.Web/sites', variables('circuitBreakerFunctionAppName'))]",
                "[resourceId('Microsoft.KeyVault/vaults/secrets', variables('keyVaultName'), variables('circuitBreakerStorageSecretName'))]"
            ],
            "properties": {
                "AzureWebJobsStorage": "[concat('@Microsoft.KeyVault(SecretUri=', reference(resourceId('Microsoft.KeyVault/vaults/secrets', variables('keyVaultName'), variables('circuitBreakerStorageSecretName')), '2019-09-01').secretUriWithVersion, ')')]",
                "WEBSITE_CONTENTAZUREFILECONNECTIONSTRING": "[concat('@Microsoft.KeyVault(SecretUri=', reference(resourceId('Microsoft.KeyVault/vaults/secrets', variables('keyVaultName'), variables('circuitBreakerStorageSecretName')), '2019-09-01').secretUriWithVersion, ')')]",
                "WEBSITE_CONTENTSHARE": "[variables('circuitBreakerFunctionAppName')]",
                "FUNCTIONS_EXTENSION_VERSION": "~3",
                "FUNCTIONS_WORKER_RUNTIME": "dotnet",
                "APPINSIGHTS_INSTRUMENTATIONKEY": "[concat('@Microsoft.KeyVault(SecretUri=', reference(resourceId('Microsoft.KeyVault/vaults/secrets', variables('keyVaultName'), 'InstrumentationKey'), '2019-09-01').secretUriWithVersion, ')')]",
                "WEBSITE_RUN_FROM_PACKAGE": "1",
                "FailureThreshold": "[parameters('FailureThreshold')]",
                "WindowSize": "[parameters('WindowSize')]"
            }
        }
    ],
    "outputs": {
        "appInsightsName": {
            "type": "string",
            "value": "[variables('appInsightsName')]"
        },
        "appInsightsId": {
            "type": "string",
            "value": "[resourceId('/Microsoft.Insights/components/', variables('appInsightsName'), '2015-05-01')]"
        },
        "keyVaultName": {
            "type": "string",
            "value": "[variables('keyVaultName')]"
        },
        "keyVaultId": {
            "type": "string",
            "value": "[resourceId('/Microsoft.KeyVault/vaults/', variables('keyVaultName'), '2019-09-01')]"
        },
        "serviceBusName": {
            "type": "string",
            "value": "[variables('serviceBusName')]"
        },
        "serviceBusId": {
            "type": "string",
            "value": "[resourceId('/Microsoft.ServiceBus/namespaces/', variables('serviceBusName'), '2017-04-01')]"
        }
    }
}
