parameters:
  name: ''
  sourceCodePath: ''
  testCodePath: ''
  buildConfiguration: ''
  codeCoverageThreshold: ''

jobs:
- job: ${{ parameters.name }}
  pool: 
    vmImage: 'ubuntu-18.04'
  steps:
  - task: DotNetCoreCLI@2
    name:  'Build${{ parameters.name }}'
    inputs:
      command: 'build'
      projects: '${{ parameters.sourceCodePath }}'
      arguments: '--configuration ${{ parameters.buildConfiguration }}'
  - task: DotNetCoreCLI@2
    condition: ne('${{ parameters.testCodePath }}', '')
    name:  'Test${{ parameters.name }}'
    inputs:
      command: 'test'
      testRunTitle: '${{ parameters.name }} Test Run'
      projects: '${{ parameters.testCodePath }}'
      arguments: '--configuration ${{ parameters.buildConfiguration }} /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:threshold=${{ parameters.codeCoverageThreshold }} /p:ThresholdType=line /p:ThresholdStat=total /p:CoverletOutput=$(Build.SourcesDirectory)/TestResults/Coverage/'
  - task: PublishCodeCoverageResults@1
    condition: ne('${{ parameters.testCodePath }}', '')
    name: 'PublishCodeCoverageReport'
    inputs:
      codeCoverageTool: 'cobertura'
      summaryFileLocation: '$(Build.SourcesDirectory)/TestResults/Coverage/**/*coverage.cobertura.xml'
  - task: DotNetCoreCLI@2
    name:  'Publish${{ parameters.name }}'
    inputs:
      command: publish
      publishWebProjects: False
      projects: '${{ parameters.sourceCodePath }}'
      arguments: '--configuration ${{ parameters.buildConfiguration }} --output $(Build.ArtifactStagingDirectory)'
      zipAfterPublish: True
  - task: PublishPipelineArtifact@1
    inputs:
      targetPath: $(Build.ArtifactStagingDirectory)
      artifactName: '${{ parameters.name }}'